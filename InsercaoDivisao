#include <stdio.h>
#include <stdlib.h>

typedef struct BTreeNode {
    int *keys;
    int t;
    struct BTreeNode **C;
    int n;
    int leaf;
} Node;

Node* newNode(int t, int leaf) {
    Node* node = (Node*)malloc(sizeof(Node));
    node->t = t;
    node->leaf = leaf;
    node->keys = (int*)malloc(sizeof(int)*((2*t)-1));
    node->C = (Node**)malloc(sizeof(Node*)*(2*t));
    node->n = 0;
    return node;
}

void splitChild(Node *x, int i, Node *y) {
    int t = y->t;
    Node *z = newNode(t, y->leaf);
    x->C[i+1] = z;

    z->n = t - 1;
    for (int j = 0; j < t-1; j++)
        z->keys[j] = y->keys[j+t];

    if (y->leaf == 0) {
        for (int j = 0; j < t; j++)
            z->C[j] = y->C[j+t];
    }

    y->n = t - 1;

    for (int j = x->n; j >= i+1; j--)
        x->C[j+1] = x->C[j];

    x->C[i+1] = z;

    for (int j = x->n-1; j >= i; j--)
        x->keys[j+1] = x->keys[j];

    x->keys[i] = y->keys[t-1];  // Corrigido aqui

    x->n = x->n + 1;

    for (int j = y->n; j < 2*t-1; j++)
        y->keys[j] = 0;
}

void insertNonFull(Node *x, int k) {
    int i = x->n-1;

    if (x->leaf == 1) {
        while (i >= 0 && x->keys[i] > k) {
            x->keys[i+1] = x->keys[i];
            i--;
        }

        x->keys[i+1] = k;
        x->n = x->n + 1;
    } else {
        while (i >= 0 && x->keys[i] > k)
            i--;

        if (x->C[i+1]->n == ((2*x->t) - 1)) {
            splitChild(x, i+1, x->C[i+1]);

            if (x->keys[i+1] < k)
                i++;
        }
        insertNonFull(x->C[i+1], k);
    }
}

void insert(Node **root, int k, int t) {
    Node *r = *root;

    if (r == NULL) {
        r = newNode(t, 1);
        r->keys[0] = k;
        r->n = 1;
        *root = r;
        return;
    }

    if (r != NULL && r->n == ((2*t)-1)) {
        Node *s = newNode(t, 0);

        s->C[0] = r;

        splitChild(s, 0, r);

        int i=0;
        if(s -> keys[0] < k)
            i++;

        insertNonFull(s -> C[i], k);

        *root=s;

    } else {

        insertNonFull(r,k);

    }
}

void printTree(Node *x, int indent) {
    if (x != NULL) {
        int i;
        for (i = 0; i < x->n; i++) {
            if (x->leaf == 0) {
                printTree(x->C[i], indent+10);
            }
            printf("%*s%d\n", indent, "", x->keys[i]);
        }
        if (x->leaf == 0) {
            printTree(x->C[i], indent+10);
        }
    }
}

int main() {
   Node *root=NULL;
   insert(&root,10,3);
   insert(&root,20,3);
   insert(&root,30,3);
   insert(&root,40,3);
   insert(&root,50,3);
   insert(&root,60,3);
   printTree(root, 0);
   return 0;
}
